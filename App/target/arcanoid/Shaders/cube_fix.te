#version 450

layout( triangles, equal_spacing, ccw) in;


in vec3 tc_vertexPosition_cameraspace[];
in vec3 tc_LightDirection_cameraspace[];
in vec3 tc_EyeDirection_cameraspace[];
in vec3 tc_Position_worldspace[];

out vec3 te_vertexPosition_cameraspace;
out vec3 te_LightDirection_cameraspace;
out vec3 te_EyeDirection_cameraspace;
out vec3 te_Position_worldspace;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2){
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2; 
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2){
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2; 
}

void main(){
    float u = gl_TessCoord[0];
    float v = gl_TessCoord[1];
    float w = gl_TessCoord[2];   // w= 1 - u - v

    vec4 pos = u * gl_in[0].gl_Position + v * gl_in[1].gl_Position + w * gl_in[2].gl_Position;

    //te_vertexPosition_cameraspace = tc_vertexPosition_cameraspace;
    //te_LightDirection_cameraspace = tc_LightDirection_cameraspace;
    //te_EyeDirection_cameraspace = tc_EyeDirection_cameraspace;
    //te_Position_worldspace = tc_Position_worldspace;

    te_Position_worldspace = interpolate3D(tc_Position_worldspace[0],tc_Position_worldspace[1],tc_Position_worldspace[2]);
    te_EyeDirection_cameraspace = interpolate3D(tc_EyeDirection_cameraspace[0],tc_EyeDirection_cameraspace[1],tc_EyeDirection_cameraspace[2]);
    te_LightDirection_cameraspace = interpolate3D(tc_LightDirection_cameraspace[0],tc_LightDirection_cameraspace[1],tc_LightDirection_cameraspace[2]);
    te_EyeDirection_cameraspace = interpolate3D(tc_vertexPosition_cameraspace[0],tc_vertexPosition_cameraspace[1],tc_vertexPosition_cameraspace[2]);
    gl_Position = pos; 
}

