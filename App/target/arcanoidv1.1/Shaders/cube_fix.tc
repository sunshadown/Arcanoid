#version 330


layout(vertices = 3)out;

in vec3 vertexPosition_cameraspace[];
in vec3 LightDirection_cameraspace[];
in vec3 EyeDirection_cameraspace[];
in vec3 Position_worldspace[];

out vec3 tc_vertexPosition_cameraspace[];
out vec3 tc_LightDirection_cameraspace[];
out vec3 tc_EyeDirection_cameraspace[];
out vec3 tc_Position_worldspace[];

uniform vec3 tessLevelOuter;
uniform float tessLevelInner;

void main(){
    
    gl_TessLevelOuter[0] = tessLevelOuter[0];
    gl_TessLevelOuter[1] = tessLevelOuter[1];
    gl_TessLevelOuter[2] = tessLevelOuter[2];
    gl_TessLevelInner[0] = tessLevelInner;

    tc_vertexPosition_cameraspace[gl_InvocationID] = vertexPosition_cameraspace[gl_InvocationID];
    tc_LightDirection_cameraspace[gl_InvocationID] = LightDirection_cameraspace[gl_InvocationID];
    tc_EyeDirection_cameraspace[gl_InvocationID] = EyeDirection_cameraspace[gl_InvocationID];
    tc_Position_worldspace[gl_InvocationID] = Position_worldspace[gl_InvocationID];
    
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}